// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.0.x"]
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique
  password      String
  token         String      @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  phones        Phone[]
  auto_replies  AutoReply[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

enum PhoneStatus {
  CLOSE
  OPEN
  CONNECTING
}

model Phone {
  id            String       @id @default(uuid())
  name          String
  number        String?
  account_name  String?
  qrCode        String?      @db.Text
  status        PhoneStatus? @default(value: CLOSE)
  isOnline      Boolean      @default(value: false) @map("is_online")
  token         String       @unique @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  auto_replies  AutoReply[]
  is_save_group Boolean      @default(value: false) @map("is_save_group")
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")

  @@map(name: "phones")
}

enum ReplyType {
  text
  image
  button
  template
  list
  webhook
}

enum KeywordType {
  Equal
  Contain
  Any
}

enum ReplyWhen {
  Group
  Personal
  All
}

enum AutoReplyStatus {
  active
  inactive
}

enum TypeRequest {
  GET
  POST
}

enum ParamType {
  Sender
  Recipient
  Message
  Quote
  Custom
}

model AutoReply {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  phone          Phone           @relation(fields: [phoneId], references: [id], onDelete: Cascade)
  phoneId        String
  keyword        String
  type_keyword   KeywordType     @default(value: Equal)
  type           ReplyType       @default(value: text)
  reply          Json?
  reply_status   AutoReplyStatus @default(value: active)
  reply_when     ReplyWhen       @default(value: All)
  is_quoted      Boolean         @default(value: false)
  is_save_inbox  Boolean         @default(value: false)
  url            String?         @db.Text
  type_request   TypeRequest?
  param_1        String?
  isi_param_1    ParamType?
  param_2        String?
  isi_param_2    ParamType?
  param_3        String?
  isi_param_3    ParamType?
  custom_value_1 String?
  custom_value_2 String?
  custom_value_3 String?
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @updatedAt @map(name: "updated_at")

  @@map(name: "auto_replies")
}

model InboxMessage {
  id             Int          @id @default(autoincrement())
  message        String?      @db.Text
  image_in       String?
  quote          String?      @db.Text
  status         Int?         @map(name: "status") @db.TinyInt
  sender         String
  recipient      String
  sentAt         DateTime     @default(now()) @map(name: "sentAt")
  receivedAt     DateTime     @default(now()) @map(name: "receivedAt")
  isSent         Boolean      @default(value: false) @map("is_sent")
  isRead         Boolean      @default(value: true) @map("is_read")
  url            String?      @db.Text
  type_request   TypeRequest?
  param_1        String?      @db.Text
  isi_param_1    ParamType?   @map(name: "isi_param_1")
  param_2        String?      @db.Text
  isi_param_2    ParamType?   @map(name: "isi_param_2")
  param_3        String?      @db.Text
  isi_param_3    ParamType?   @map(name: "isi_param_3")
  custom_value_1 String?
  custom_value_2 String?
  custom_value_3 String?
  respons        String?      @db.Text
  keterangan     String?      @map("keterangan") @db.VarChar(255)

  @@map(name: "inbox_messages")
}

model Group {
  id           Int           @id @default(autoincrement())
  group_id     String
  subject      String
  creation     DateTime?
  size         Int?
  owner        String
  desc         String?       @db.Text
  restrict     Boolean       @default(value: false) @map(name: "restrict")
  announce     Boolean       @default(value: false) @map(name: "announce")
  participants Participant[]

  @@map(name: "groups")
}

model Participant {
  id          Int     @id @default(autoincrement())
  whatsapp_id String
  admin       String?
  groups      Group[]

  @@map(name: "participants")
}
