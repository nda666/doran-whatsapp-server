// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.0.x"]
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String
  token         String    @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  phones        Phone[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

enum PhoneStatus {
  CLOSE
  OPEN
  CONNECTING
}

model Phone {
  id           String       @id @default(uuid())
  name         String
  number       String?
  account_name String?
  qrCode       String?      @db.Text
  status       PhoneStatus? @default(value: CLOSE)
  isOnline     Boolean      @default(value: false) @map("is_online")
  token        String       @unique @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime     @default(now()) @map(name: "created_at")
  updatedAt    DateTime     @updatedAt @map(name: "updated_at")

  @@map(name: "phones")
}

enum ReplyType {
  text
  image
  button
  template
  list
}

model AutoReply {
  id          Int
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  phone       Phone          @relation(fields: [phoneId], references: [id])
  phoneId     String
  keyword     String
  type        ReplyType      @default(value: text) 
  reply       Json?
  createdAt   DateTime       @default(now()) @map(name: "created_at")
  updatedAt   DateTime       @updatedAt @map(name: "updated_at")

  @@map(name: "auto_replies")
}